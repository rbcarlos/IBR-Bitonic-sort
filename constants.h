#ifndef CONSTANTS_BITONIC_SORT_H
#define CONSTANTS_BITONIC_SORT_H

typedef struct Interval interval_t;
typedef int data_t;
#define N_ELEMENTS 1048576
#define GPU_RUNS 100

struct Interval
{
    int offset0;
    int length0;
    int offset1;
    int length1;
};

#define N_THREADS 256
#define ELEMS_PER_THREAD 4

// How many threads are used per one thread block for bitonic sort, which is performed entirely
// in shared memory. Has to be power of 2.
#define THREADS_BITONIC_SORT 256
// How many elements are processed by one thread in bitonic sort kernel. Min value is 2.
// Has to be divisible by 2.
#define ELEMS_BITONIC_SORT 4


// How many threads are used per on thread block for bitonic merge. Has to be power of 2.
#define THREADS_LOCAL_MERGE 256
// How many elements are processed by one thread in bitonic merge kernel. Min value is 2.
// Has to be divisible by 2.
#define ELEMS_LOCAL_MERGE 4


// How many threads are used per one thread block for kernel, which initializes intervals.
// Has to be power of 2.
#define THREADS_INIT_INTERVALS 128
// How many intervals are generated by one thread. Has to be power of 2. Min value is 2.
#define ELEMS_INIT_INTERVALS 2


// How many threads are used per one thread block for kernel, which generates intervals.
// Has to be power of 2.
#define THREADS_GEN_INTERVALS 256
// How many intervals are generated by one thread. Has to be power of 2. Min value is 2.
#define ELEMS_GEN_INTERVALS 2

#endif